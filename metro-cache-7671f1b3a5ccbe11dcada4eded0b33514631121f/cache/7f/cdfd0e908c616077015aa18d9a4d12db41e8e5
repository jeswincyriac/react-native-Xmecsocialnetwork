__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _reactNative = require(_dependencyMap[0], "react-native");

  var _getSceneIndicesForInterpolationInputRange = require(_dependencyMap[1], "../../utils/getSceneIndicesForInterpolationInputRange");

  var _getSceneIndicesForInterpolationInputRange2 = _interopRequireDefault(_getSceneIndicesForInterpolationInputRange);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  var crossFadeInterpolation = function crossFadeInterpolation(first, index, last) {
    return {
      inputRange: [first, index - 0.75, index - 0.5, index, index + 0.5, last],
      outputRange: [0, 0, 0.2, 1, 0.5, 0]
    };
  };

  function forLeft(props) {
    var position = props.position,
        scene = props.scene,
        scenes = props.scenes;
    var interpolate = (0, _getSceneIndicesForInterpolationInputRange2.default)(props);
    if (!interpolate) return {
      opacity: 0
    };
    var first = interpolate.first,
        last = interpolate.last;
    var index = scene.index;
    return {
      opacity: position.interpolate(crossFadeInterpolation(first, index, last))
    };
  }

  function forCenter(props) {
    var position = props.position,
        scene = props.scene;
    var interpolate = (0, _getSceneIndicesForInterpolationInputRange2.default)(props);
    if (!interpolate) return {
      opacity: 0
    };
    var first = interpolate.first,
        last = interpolate.last;
    var index = scene.index;
    return {
      opacity: position.interpolate(crossFadeInterpolation(first, index, last))
    };
  }

  function forRight(props) {
    var position = props.position,
        scene = props.scene;
    var interpolate = (0, _getSceneIndicesForInterpolationInputRange2.default)(props);
    if (!interpolate) return {
      opacity: 0
    };
    var first = interpolate.first,
        last = interpolate.last;
    var index = scene.index;
    return {
      opacity: position.interpolate(crossFadeInterpolation(first, index, last))
    };
  }

  function forLeftButton(props) {
    var position = props.position,
        scene = props.scene,
        scenes = props.scenes;
    var interpolate = (0, _getSceneIndicesForInterpolationInputRange2.default)(props);
    if (!interpolate) return {
      opacity: 0
    };
    var first = interpolate.first,
        last = interpolate.last;
    var index = scene.index;
    return {
      opacity: position.interpolate({
        inputRange: [first, first + Math.abs(index - first) / 2, index, last - Math.abs(last - index) / 2, last],
        outputRange: [0, 0.5, 1, 0.5, 0]
      })
    };
  }

  var LEFT_LABEL_OFFSET = _reactNative.Dimensions.get('window').width / 2 - 70 - 25;

  function forLeftLabel(props) {
    var position = props.position,
        scene = props.scene,
        scenes = props.scenes;
    var interpolate = (0, _getSceneIndicesForInterpolationInputRange2.default)(props);
    if (!interpolate) return {
      opacity: 0
    };
    var first = interpolate.first,
        last = interpolate.last;
    var index = scene.index;
    var offset = LEFT_LABEL_OFFSET;
    return {
      opacity: position.interpolate({
        inputRange: [first, index - 0.35, index, index + 0.5, last],
        outputRange: [0, 0, 1, 0.5, 0]
      }),
      transform: [{
        translateX: position.interpolate({
          inputRange: [first, index, last],
          outputRange: _reactNative.I18nManager.isRTL ? [-offset, 0, offset] : [offset, 0, -offset * 1.5]
        })
      }]
    };
  }

  var TITLE_OFFSET_IOS = _reactNative.Dimensions.get('window').width / 2 - 70 + 25;

  function forCenterFromLeft(props) {
    var position = props.position,
        scene = props.scene;
    var interpolate = (0, _getSceneIndicesForInterpolationInputRange2.default)(props);
    if (!interpolate) return {
      opacity: 0
    };
    var first = interpolate.first,
        last = interpolate.last;
    var index = scene.index;
    var inputRange = [first, index - 0.5, index, index + 0.5, last];
    var offset = TITLE_OFFSET_IOS;
    return {
      opacity: position.interpolate({
        inputRange: [first, index - 0.5, index, index + 0.7, last],
        outputRange: [0, 0, 1, 0, 0]
      }),
      transform: [{
        translateX: position.interpolate({
          inputRange: [first, index, last],
          outputRange: _reactNative.I18nManager.isRTL ? [-offset, 0, offset] : [offset, 0, -offset]
        })
      }]
    };
  }

  exports.default = {
    forLeft: forLeft,
    forLeftButton: forLeftButton,
    forLeftLabel: forLeftLabel,
    forCenterFromLeft: forCenterFromLeft,
    forCenter: forCenter,
    forRight: forRight
  };
});