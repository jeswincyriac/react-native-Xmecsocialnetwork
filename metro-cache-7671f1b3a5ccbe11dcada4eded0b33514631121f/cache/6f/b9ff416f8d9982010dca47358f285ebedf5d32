__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react2 = require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = require(_dependencyMap[1], "./../../../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _class,
      _temp,
      _initialiseProps,
      _jsxFileName = "/media/jeswin/Lectures and Files/web devl/xmec/frontend/SocialNetworkApp/node_modules/react-navigation/src/views/ResourceSavingSceneView.js";

  var _reactNative = require(_dependencyMap[2], "react-native");

  var _propTypes = require(_dependencyMap[3], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _SceneView = require(_dependencyMap[4], "./SceneView");

  var _SceneView2 = _interopRequireDefault(_SceneView);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    ResourceSavingSceneView: {
      displayName: "ResourceSavingSceneView"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "/media/jeswin/Lectures and Files/web devl/xmec/frontend/SocialNetworkApp/node_modules/react-navigation/src/views/ResourceSavingSceneView.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var FAR_FAR_AWAY = 3000;

  var ResourceSavingSceneView = _wrapComponent("ResourceSavingSceneView")((_temp = _class = function (_React$PureComponent) {
    _inherits(ResourceSavingSceneView, _React$PureComponent);

    function ResourceSavingSceneView(props) {
      _classCallCheck(this, ResourceSavingSceneView);

      var _this = _possibleConstructorReturn(this, (ResourceSavingSceneView.__proto__ || Object.getPrototypeOf(ResourceSavingSceneView)).call(this));

      _initialiseProps.call(_this);

      var key = props.childNavigation.state.key;
      var focusedIndex = props.navigation.state.index;
      var focusedKey = props.navigation.state.routes[focusedIndex].key;
      var isFocused = key === focusedKey;
      _this.state = {
        awake: props.lazy ? isFocused : true,
        visible: isFocused
      };
      return _this;
    }

    _createClass(ResourceSavingSceneView, [{
      key: "componentWillMount",
      value: function componentWillMount() {
        this._actionListener = this.props.navigation.addListener('action', this._onAction);
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this._actionListener.remove();
      }
    }, {
      key: "render",
      value: function render() {
        var _state = this.state,
            awake = _state.awake,
            visible = _state.visible;

        var _props = this.props,
            childNavigation = _props.childNavigation,
            navigation = _props.navigation,
            removeClippedSubviews = _props.removeClippedSubviews,
            lazy = _props.lazy,
            rest = _objectWithoutProperties(_props, ["childNavigation", "navigation", "removeClippedSubviews", "lazy"]);

        return _react3.default.createElement(
          _reactNative.View,
          {
            style: styles.container,
            collapsable: false,
            removeClippedSubviews: _reactNative.Platform.OS === 'android' ? removeClippedSubviews : !visible && removeClippedSubviews,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 46
            }
          },
          _react3.default.createElement(
            _reactNative.View,
            {
              style: this._mustAlwaysBeVisible() || visible ? styles.innerAttached : styles.innerDetached,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 55
              }
            },
            awake ? _react3.default.createElement(_SceneView2.default, _extends({}, rest, {
              navigation: childNavigation,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 62
              }
            })) : null
          )
        );
      }
    }]);

    return ResourceSavingSceneView;
  }(_react3.default.PureComponent), _initialiseProps = function _initialiseProps() {
    var _this2 = this;

    this._mustAlwaysBeVisible = function () {
      return _this2.props.animationEnabled || _this2.props.swipeEnabled;
    };

    this._onAction = function (payload) {
      if (payload.action.type == 'Navigation/COMPLETE_TRANSITION' || !payload.state) {
        return;
      }

      var _payload$state = payload.state,
          routes = _payload$state.routes,
          index = _payload$state.index;
      var key = _this2.props.childNavigation.state.key;

      if (routes[index].key === key) {
        if (!_this2.state.visible) {
          var nextState = {
            visible: true
          };

          if (!_this2.state.awake) {
            nextState.awake = true;
          }

          _this2.setState(nextState);
        }
      } else {
        if (_this2.state.visible) {
          _this2.setState({
            visible: false
          });
        }
      }
    };
  }, _temp));

  exports.default = ResourceSavingSceneView;

  var styles = _reactNative.StyleSheet.create({
    container: {
      flex: 1,
      overflow: 'hidden'
    },
    innerAttached: {
      flex: 1
    },
    innerDetached: {
      flex: 1,
      top: FAR_FAR_AWAY
    }
  });
});